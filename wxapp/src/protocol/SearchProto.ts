// Code generated by Webpb compiler, do not edit.
// https://github.com/jg513/webpb

import * as Webpb from 'webpb';

import * as ResourceProto from './ResourceProto';

export interface ISearchHistoryPb {
    entries: string[];
}

export class SearchHistoryPb implements ISearchHistoryPb {
    entries!: string[];
    META: () => Webpb.WebpbMeta;

    private constructor(p?: ISearchHistoryPb) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'SearchHistoryPb',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: ISearchHistoryPb): SearchHistoryPb {
        return new SearchHistoryPb(properties);
    }
}

export interface IHotSearchPb {
    entries: string[];
}

export class HotSearchPb implements IHotSearchPb {
    entries!: string[];
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IHotSearchPb) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'HotSearchPb',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IHotSearchPb): HotSearchPb {
        return new HotSearchPb(properties);
    }
}

export interface IarticlePb {
    id: string;
    title: string;
    category: string;
}

export class articlePb implements IarticlePb {
    id!: string;
    title!: string;
    category!: string;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IarticlePb) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'articlePb',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IarticlePb): articlePb {
        return new articlePb(properties);
    }
}

export interface ISearchResultPb {
    module: string;
    entries: IarticlePb[];
    paging: ResourceProto.IPagingPb;
}

export class SearchResultPb implements ISearchResultPb {
    module!: string;
    entries!: IarticlePb[];
    paging!: ResourceProto.IPagingPb;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: ISearchResultPb) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'SearchResultPb',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: ISearchResultPb): SearchResultPb {
        return new SearchResultPb(properties);
    }
}

export interface IHotSearchResponse {
    paging: ResourceProto.IPagingPb;
    entries: IHotSearchPb;
}

export class HotSearchResponse implements IHotSearchResponse {
    paging!: ResourceProto.IPagingPb;
    entries!: IHotSearchPb;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IHotSearchResponse) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'HotSearchResponse',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IHotSearchResponse): HotSearchResponse {
        return new HotSearchResponse(properties);
    }
}

export interface ISearchHistoryResponse {
    paging: ResourceProto.IPagingPb;
    entries: ISearchHistoryPb;
}

export class SearchHistoryResponse implements ISearchHistoryResponse {
    paging!: ResourceProto.IPagingPb;
    entries!: ISearchHistoryPb;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: ISearchHistoryResponse) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'SearchHistoryResponse',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: ISearchHistoryResponse): SearchHistoryResponse {
        return new SearchHistoryResponse(properties);
    }
}

export interface ISearchResultResponse {
    data: ISearchResultPb[];
}

export class SearchResultResponse implements ISearchResultResponse {
    data!: ISearchResultPb[];
    META: () => Webpb.WebpbMeta;

    private constructor(p?: ISearchResultResponse) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'SearchResultResponse',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: ISearchResultResponse): SearchResultResponse {
        return new SearchResultResponse(properties);
    }
}

export interface IHotSearchRequest {
    pageable: ResourceProto.IPageablePb;
}

export class HotSearchRequest implements IHotSearchRequest, Webpb.WebpbMessage {
    pageable!: ResourceProto.IPageablePb;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IHotSearchRequest) {
        Webpb.assign(p, this, ["pageable"]);
        this.META = () => (p && {
            class: 'HotSearchRequest',
            method: 'GET',
            path: `/api/search/hot${Webpb.query({
                page: Webpb.getter(p, 'pageable.page'),
                size: Webpb.getter(p, 'pageable.size'),
            })}`
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IHotSearchRequest): HotSearchRequest {
        return new HotSearchRequest(properties);
    }
}

export interface ISearchHistoryRequest {
    pageable: ResourceProto.IPageablePb;
}

export class SearchHistoryRequest implements ISearchHistoryRequest, Webpb.WebpbMessage {
    pageable!: ResourceProto.IPageablePb;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: ISearchHistoryRequest) {
        Webpb.assign(p, this, ["pageable"]);
        this.META = () => (p && {
            class: 'SearchHistoryRequest',
            method: 'GET',
            path: `/api/search/history${Webpb.query({
                page: Webpb.getter(p, 'pageable.page'),
                size: Webpb.getter(p, 'pageable.size'),
            })}`
        }) as Webpb.WebpbMeta;
    }

    static create(properties: ISearchHistoryRequest): SearchHistoryRequest {
        return new SearchHistoryRequest(properties);
    }
}

export interface ISearchResultRequest {
    pageable: ResourceProto.IPageablePb;
    key: string;
    module?: string;
}

export class SearchResultRequest implements ISearchResultRequest, Webpb.WebpbMessage {
    pageable!: ResourceProto.IPageablePb;
    key!: string;
    module?: string;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: ISearchResultRequest) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'SearchResultRequest',
            method: 'GET',
            path: `/api/search/result${Webpb.query({
                page: Webpb.getter(p, 'pageable.page'),
                size: Webpb.getter(p, 'pageable.size'),
                key: p.key,
                module: p.module,
            })}`
        }) as Webpb.WebpbMeta;
    }

    static create(properties: ISearchResultRequest): SearchResultRequest {
        return new SearchResultRequest(properties);
    }
}
