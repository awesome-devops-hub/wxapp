// Code generated by Webpb compiler, do not edit.
// https://github.com/jg513/webpb

import * as Webpb from 'webpb';

export enum GenderPb {
    MALE = 1,
    FEMALE = 2,
}

export interface IUserPb {
    id: string;
    nickname: string;
    avatar: string;
    gender: number;
    created: number;
}

export class UserPb implements IUserPb {
    id!: string;
    nickname!: string;
    avatar!: string;
    gender!: number;
    created!: number;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IUserPb) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'UserPb',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IUserPb): UserPb {
        return new UserPb(properties);
    }
}

export interface IUserMpLoginRequest {
    appId: string;
    code: string;
}

export class UserMpLoginRequest implements IUserMpLoginRequest, Webpb.WebpbMessage {
    appId!: string;
    code!: string;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IUserMpLoginRequest) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'UserMpLoginRequest',
            method: 'POST',
            path: `/api/mp/user/login`
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IUserMpLoginRequest): UserMpLoginRequest {
        return new UserMpLoginRequest(properties);
    }
}

export interface IUserMpLoginResponse {
    id: string;
    token: string;
}

export class UserMpLoginResponse implements IUserMpLoginResponse {
    id!: string;
    token!: string;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IUserMpLoginResponse) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'UserMpLoginResponse',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IUserMpLoginResponse): UserMpLoginResponse {
        return new UserMpLoginResponse(properties);
    }
}

export interface IHelloRequest {
}

export class HelloRequest implements IHelloRequest, Webpb.WebpbMessage {
    META: () => Webpb.WebpbMeta;

    private constructor() {
        this.META = () => ({
            class: 'HelloRequest',
            method: 'GET',
            path: `/api/hello`
        }) as Webpb.WebpbMeta;
    }

    static create(): HelloRequest {
        return new HelloRequest();
    }
}

export interface IHelloResponse {
    message: string;
}

export class HelloResponse implements IHelloResponse {
    message!: string;
    META: () => Webpb.WebpbMeta;

    private constructor(p?: IHelloResponse) {
        Webpb.assign(p, this, []);
        this.META = () => (p && {
            class: 'HelloResponse',
            method: '',
            path: ''
        }) as Webpb.WebpbMeta;
    }

    static create(properties: IHelloResponse): HelloResponse {
        return new HelloResponse(properties);
    }
}
